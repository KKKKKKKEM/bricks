# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from bricks.client.gprc_.generated import service_pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.execute = channel.unary_unary(
            '/spider.Service/execute',
            request_serializer=service_pb2.Request.SerializeToString,
            response_deserializer=service_pb2.Response.FromString,
            _registered_method=True)
        self.submit = channel.unary_unary(
            '/spider.Service/submit',
            request_serializer=service_pb2.Request.SerializeToString,
            response_deserializer=service_pb2.Response.FromString,
            _registered_method=True)
        self.health = channel.unary_unary(
            '/spider.Service/health',
            request_serializer=service_pb2.Request.SerializeToString,
            response_deserializer=service_pb2.Response.FromString,
            _registered_method=True)


class ServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def execute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def submit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def health(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_servicer_to_server(servicer, server):
    rpc_method_handlers = {
        'execute': grpc.unary_unary_rpc_method_handler(
            servicer.execute,
            request_deserializer=service_pb2.Request.FromString,
            response_serializer=service_pb2.Response.SerializeToString,
        ),
        'submit': grpc.unary_unary_rpc_method_handler(
            servicer.submit,
            request_deserializer=service_pb2.Request.FromString,
            response_serializer=service_pb2.Response.SerializeToString,
        ),
        'health': grpc.unary_unary_rpc_method_handler(
            servicer.health,
            request_deserializer=service_pb2.Request.FromString,
            response_serializer=service_pb2.Response.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'spider.Service', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('spider.Service', rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class Service(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def execute(request,
               target,
               options=(),
               channel_credentials=None,
               call_credentials=None,
               insecure=False,
               compression=None,
               wait_for_ready=None,
               timeout=None,
               metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/spider.Service/execute',
            service_pb2.Request.SerializeToString,
            service_pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def submit(request,
               target,
               options=(),
               channel_credentials=None,
               call_credentials=None,
               insecure=False,
               compression=None,
               wait_for_ready=None,
               timeout=None,
               metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/spider.Service/submit',
            service_pb2.Request.SerializeToString,
            service_pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def health(request,
               target,
               options=(),
               channel_credentials=None,
               call_credentials=None,
               insecure=False,
               compression=None,
               wait_for_ready=None,
               timeout=None,
               metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/spider.Service/health',
            service_pb2.Request.SerializeToString,
            service_pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
